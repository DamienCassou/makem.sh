#+TITLE: makem.sh

#+PROPERTY: LOGGING nil

# Note: This readme works with the org-make-toc <https://github.com/alphapapa/org-make-toc> package, which automatically updates the table of contents.

=makem=.sh is a script helps to build, lint, and test Emacs Lisp packages.  It aims to make linting and testing as simple as possible without requiring per-package configuration.

It works similarly to a Makefile in that "rules" are called to perform actions such as byte-compiling, linting, testing, etc.

Source and test files are discovered automatically from the project's Git repo, and package dependencies within them are parsed automatically.

Output is simple: by default, there is no output unless errors occur.  With increasing verbosity levels, more detail gives positive feedback.  Output is colored by default to make reading easy.

When desired, [[https://github.com/alphapapa/emacs-sandbox.sh][emacs-sandbox.sh]] can be used as a backend, which allows package dependencies to be installed automatically into a clean Emacs "sandbox" configuration without affecting the developer's personal configuration.  This is especially helpful when upstream dependencies may have released new versions that differ from those installed in the developer's personal configuration.

* Contents                                                         :noexport:
:PROPERTIES:
:TOC:      this
:END:
-  [[#installation][Installation]]
-  [[#usage][Usage]]
  -  [[#makefile][Makefile]]
  -  [[#script][Script]]
  -  [[#github-action][GitHub Action]]
  -  [[#git-pre-push-hook][git pre-push hook]]
-  [[#changelog][Changelog]]

* Screenshots
:PROPERTIES:
:TOC:      ignore
:END:

Some example output.  The first shows running the =test= rule with verbosity level 1, which shows which tests are run but omits each test's output unless it fails:

[[images/make-test-v.png]]

Increasing the verbosity shows green output for passing tests:

[[images/make-test-vv.png]]

The =lint-compile= rule treats byte-compiler warnings as errors:

[[images/make-lint-compile.png]]

The =all= rule runs all rules and treats warnings as errors:

[[images/make-all.png]]

Of course, with increased verbosity, it also shows which rules did not signal errors:

[[images/make-all-v.png]]

The included =test.yml= GitHub Actions file can be used to easily set up CI, giving output like:

[[images/github-action.png]]

* Installation
:PROPERTIES:
:TOC:      0
:END:

Copy =makem.sh= into your package's root directory.  Optionally, also copy =Makefile=, to make calling the script easier.

* Usage
:PROPERTIES:
:TOC:      1
:END:

The =makem.sh= script can be called directly or through a =Makefile=.  Use =makem.sh --help= to list available rules.

** Makefile

A default =Makefile= is provided which calls the =makem.sh= script.  Call it with the name of a rule and an optional verbosity level, like:

#+BEGIN_SRC sh
  # Run all rules.
  $ make all

  # Run all lints.
  $ make lint

  # Run all tests.
  $ make test

  # Run ERT tests with verbosity level 1.
  $ make v=v test-ert

  # Run Buttercup tests with verbosity level 2.
  $ make v=vv test-buttercup

  # Run tests with emacs-sandbox.sh in a temporary sandbox and
  # automatically install dependencies.
  $ make sandbox=t auto-install=t test

  # Like previous, but use a permanent sandbox directory.  The developer
  # might choose to recreate it manually when necessary, leaving it in
  # place to save time otherwise.
  $ mkdir sandbox
  $ make sandbox-dir=sandbox auto-install=t test
#+END_SRC

** Script

The script may be called directly to specify additional options.

#+BEGIN_EXAMPLE
  makem.sh [OPTIONS] RULES...

  Rules:
    all      Run all lints and tests.
    compile  Byte-compile source files.
    interactive  Run Emacs interactively, loading project source files
                 automatically.  Most useful with --sandbox and --auto-install.

    lint           Run all lints.
    lint-checkdoc  Run checkdoc.
    lint-compile   Byte-compile source files with warnings as errors.
    lint-package   Run package-lint.

    test, tests     Run all tests.
    test-buttercup  Run Buttercup tests.
    test-ert        Run ERT tests.

  Options:
    -d, --debug    Print debug info.
    -h, --help     I need somebody!
    -v, --verbose  Increase verbosity, up to -vv.
    --debug-load-path  Print load-path.

    -f FILE, --file FILE  Check FILE in addition to discovered files.

    --no-color        Disable color output.
    -C, --no-compile  Don't compile files automatically.

  Sandbox options:
    These require emacs-sandbox.sh to be on your PATH.  Find it at
    <https://github.com/alphapapa/emacs-sandbox.sh>.

    -s, --sandbox          Run Emacs with emacs-sandbox.sh in a temporary
                           directory (removing directory on exit).
    -S, --sandbox-dir DIR  Use DIR for the sandbox directory (leaving it
                           on exit).  Implies -s.
    --auto-install         Automatically install package dependencies.
    -i, --install PACKAGE  Install PACKAGE before running rules.

  Source files are automatically discovered from git, or may be
  specified with options.

  Package dependencies are discovered from "Package-Requires" headers in
  source files and from a Cask file.
#+END_EXAMPLE

** GitHub Action

Using Steve Purcell's [[https://github.com/purcell/setup-emacs][setup-emacs]] Action and my [[https://github.com/alphapapa/emacs-sandbox.sh][emacs-sandbox.sh]], it's easy to set up CI on GitHub for an Emacs package.  

1.  Put =makem.sh= in your package's repo and make it executable.
2.  Add =test.yml= to your package's repo at =.github/workflows/test.yml=.  It should work without modification for most Emacs packages.

** git pre-push hook

It's often helpful to run tests automatically before pushing with git.  Here's an example of using =makem.sh= in a =pre-push= hook:

#+BEGIN_SRC sh
  #!/bin/sh

  # * Commit parameters
  # Unused now, but good for future reference.  See man 5 githooks.

  remote="$1"
  url="$2"

  read local_ref local_sha remote_ref remote_sha

  # * Run tests

  # Not using sandbox and auto-install, because "git push" shouldn't
  # cause remote code to be downloaded and executed (i.e. what would
  # happen by installing packages).  It can be done manually when
  # needed.  However, in a CI system running in a container, where
  # testing in a clean config against the latest available dependency
  # versions is desired, one could use:

  #   make sandbox=t autoinstall=t test

  make test
#+END_SRC
* Changelog
:PROPERTIES:
:TOC:      0
:END:

** 0.1-pre

Initial release.

* Credits
:PROPERTIES:
:TOC:      ignore
:END:

Inspired by Damien Cassou's excellent [[https://gitlab.petton.fr/DamienCassou/makel][makel]] project.

* Development
:PROPERTIES:
:TOC:      ignore
:END:

Bug reports, feature requests, suggestions â€” /oh my/!

* License
:PROPERTIES:
:TOC:      ignore
:END:

GPLv3

# Local Variables:
# eval: (require 'org-make-toc)
# before-save-hook: org-make-toc
# org-export-with-properties: ()
# org-export-with-title: t
# End:

